---
title: Urban Grammar - Green Belts Capsule
subtitle: Exploring the make up of Green Belts
author: Dani Arribas-Bel
doi: 10.5281/zenodo.7709786
reference-location: margin
citation-location: document
format:
  html:
    theme: journal
    css: styles.css
    code-fold: true
    fig-responsive: true
bibliography: references.bib
jupyter:
  jupytext:
    text_representation:
      extension: .qmd
      format_name: quarto
      format_version: '1.0'
      jupytext_version: 1.13.8
  kernelspec:
    display_name: Python 3 (ipykernel)
    language: python
    name: python3
---

# Introduction

This capsule[^0] considers the make up of green belt areas in England using the
Spatial Signatures [@fleischmann2022geographical]. You can see more on the
data used, and how they have been combined, in the [Data
Aquisition](data_acquisition.ipynb) section. We reserve this document to
present the main results.

[^0]: [![](https://zenodo.org/badge/578993743.svg)](https://zenodo.org/badge/latestdoi/578993743)

```{python}
#| jupyter: {source_hidden: true}
#| tags: []
import warnings
warnings.filterwarnings("ignore")

import pandas
import geopandas
import json
import requests
import contextily
import xyzservices
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
from matplotlib.colors import to_hex
import urbangrammar_graphics as ugg

def build_tab(db):
    areas = (
      db
      .assign(area=db.area/1e6)
      .groupby('type')
      ['area']
      .sum()
      .sort_values(ascending=False)
    )
    tab = pandas.DataFrame(
      {'Area (Sq.Km)': areas, '% of total area': areas * 100 / areas.sum()}
    )
    return tab.round(2)

def build_plot(tab, label=None, context=None, figsize=(2, 6)):
    ttp = tab['% of total area'].sort_values()
    ax = ttp.plot.barh(
        color='k', 
        figsize=figsize, 
        title='% of area by signature',
        label=label
    )
    if context is not None:
        (
            context
            ['% of total area']
            .reindex(ttp.index)
            .plot.barh(
                edgecolor='#8fa37e', 
                facecolor='none', 
                linewidth=2,
                ax=ax,
                label='National'
            )
        )
    ax.set_axis_off()
    if (label is not None) and (context is not None):
        plt.legend(loc='lower right', frameon=False)
    return ax

def get_signature_colors(name=True):
    """
    Ported from here as unreleased:
    https://github.com/urbangrammarai/graphics/blob/69bf5976a11c783fc8a27f59ef57efefbbee6aa8/urbangrammar_graphics/graphics.py#L207-L272
    Get a dictionary of colors mapped to signatures classes of Great Britain
    Parameters
    ----------
    name : bool
        `True` maps to names, `False` maps to string keys (e.g. `'2_1'`)
    Returns
    -------
    dict
    """
    cols = ugg.get_colormap(20, randomize=False).colors

    key = {
        "0_0": cols[16],
        "1_0": cols[15],
        "3_0": cols[9],
        "4_0": cols[12],
        "5_0": cols[21],
        "6_0": cols[8],
        "7_0": cols[4],
        "8_0": cols[18],
        "2_0": cols[6],
        "2_1": cols[23],
        "2_2": cols[19],
        "9_0": cols[7],
        "9_1": cols[3],
        "9_2": cols[22],
        "9_3": cols[0],  # outlier
        "9_4": cols[11],
        "9_5": cols[14],
        "9_6": cols[0],  # outlier
        "9_7": cols[0],  # outlier
        "9_8": cols[0],  # outlier
    }

    if name:
        types = {
            "0_0": "Countryside agriculture",
            "1_0": "Accessible suburbia",
            "3_0": "Open sprawl",
            "4_0": "Wild countryside",
            "5_0": "Warehouse/Park land",
            "6_0": "Gridded residential quarters",
            "7_0": "Urban buffer",
            "8_0": "Disconnected suburbia",
            "2_0": "Dense residential neighbourhoods",
            "2_1": "Connected residential neighbourhoods",
            "2_2": "Dense urban neighbourhoods",
            "9_0": "Local urbanity",
            "9_1": "Concentrated urbanity",
            "9_2": "Regional urbanity",
            "9_4": "Metropolitan urbanity",
            "9_5": "Hyper concentrated urbanity",
            "9_3": "outlier",
            "9_6": "outlier",
            "9_7": "outlier",
            "9_8": "outlier",
        }

        return {v: key[k] for k, v in types.items()}

    return key
sig_colors = get_signature_colors()

def build_legend(types, sig_colors=sig_colors):
    ps = []
    for t in types:
        type_patch = mpatches.Patch(color=sig_colors[t], label=t)
        ps.append(type_patch)
    return ps

db = geopandas.read_parquet('ss_clipped.pq')
```

# National statistics

We begin with a table that summarises the form and function makeup of English
green belts. To do this, we show the total area and the proportion of the
total green belt land that is occupied by each of the 16 signature types.[^1]


[^1]: You can see a brief description of these at [https://urbangrammarai.xyz/story/#ss](https://urbangrammarai.xyz/story/#ss)

```{python}
#| fig-column: margin
tab = build_tab(db)
build_plot(tab)
tab
```

The most common class, "Urban buffer", is hardly a surprise since the notion
of green belt is worked into its very definition. From the original signature
descriptions[^2], Urban buffer is: 

[^2]: [https://figshare.com/articles/dataset/Geographical_Characterisation_of_British_Urban_Form_and_Function_using_the_Spatial_Signatures_Framework/16691575/1?file=30935050](https://figshare.com/articles/dataset/Geographical_Characterisation_of_British_Urban_Form_and_Function_using_the_Spatial_Signatures_Framework/16691575/1?file=30935050)

```{python}
#| echo: false
blurb = json.loads(
    requests.get(
        'https://ndownloader.figstatic.com/files/30935050'
    ).content
)
from IPython.display import display, Markdown
display(Markdown(f"> *{blurb['Urban buffer']}*"))
```

However, less than half of green belts are classified as "Urban buffer". The rest is a combination of other classes, including "Countryside agriculture" (>40%), and "Open Sprawl" (>5%), as well as a long tail of other signatures with smaller contributions. To help the reader get a sense of what these classes represent, we include here the definitions (pen portraits) of the two most relevant ones:

- Countryside agriculture

```{python}
#| echo: false
display(Markdown(f"> *{blurb['Countryside agriculture']}*"))
```

- Open Sprawl

```{python}
#| echo: false
display(Markdown(f"> *{blurb['Open sprawl']}*"))
```

The reader can refer to this additional document for descriptions of all the classes:

> [`https://urbangrammarai.xyz/story/#ss`](https://urbangrammarai.xyz/story/#ss)

# Regional maps

The proportions above are national aggregates, and it is possible that the
signature mix varies across different urban areas. To explore this, below we
present maps to explore five English cities.

## London

::: {.panel-tabset}

```{python}
city = 'London'
```


### Proportions

```{python}
ax = build_plot(
    build_tab(db.query(f'GB_Name == "{city}"')),
    label=city,
    context=tab,
    figsize=(6, 6)
)

rects = ax.patches
labels = [i.get_text() for i in ax.get_yticklabels()]
for rect, label in zip(rects, labels):
    w = rect.get_width()
    ax.text(
        w + 5,
        rect.get_y() + rect.get_height() / 2,
        label,
        ha='left',
        va='center'
    )
```

### Map

```{python}
tmp = db.query(f'GB_Name == "{city}"')
ax = tmp.plot(
    color=tmp['type'].map(sig_colors).map(to_hex),
    linewidth=0,
    categorical=True,
    figsize=(5, 6)
)

plt.legend(
    handles=build_legend(tmp['type'].unique()), 
    bbox_to_anchor=(1, 0.9), 
    loc="upper left",
    frameon=False
)
ax.set_axis_off()
contextily.add_basemap(
    ax, crs=db.crs, source=contextily.providers.CartoDB.DarkMatterNoLabels
);
```

### Table

```{python}
build_tab(db.query(f'GB_Name == "{city}"'))
```

:::

## Manchester & Liverpool

::: {.panel-tabset}

```{python}
city = 'Merseyside and Greater Manchester'
```


### Proportions

```{python}
ax = build_plot(
    build_tab(db.query(f'GB_Name == "{city}"')),
    label=city,
    context=tab,
    figsize=(6, 6)
)

rects = ax.patches
labels = [i.get_text() for i in ax.get_yticklabels()]
for rect, label in zip(rects, labels):
    w = rect.get_width()
    ax.text(
        w + 5,
        rect.get_y() + rect.get_height() / 2,
        label,
        ha='left',
        va='center'
    )
```

### Map

```{python}
tmp = db.query(f'GB_Name == "{city}"')
ax = tmp.plot(
    color=tmp['type'].map(sig_colors).map(to_hex),
    linewidth=0,
    categorical=True,
    figsize=(5, 6)
)

plt.legend(
    handles=build_legend(tmp['type'].unique()), 
    bbox_to_anchor=(1, 0.9), 
    loc="upper left",
    frameon=False
)
ax.set_axis_off()
contextily.add_basemap(
    ax, crs=db.crs, source=contextily.providers.CartoDB.DarkMatterNoLabels
);
```

### Table

```{python}
build_tab(db.query(f'GB_Name == "{city}"'))
```

:::

## Birmingham

::: {.panel-tabset}

```{python}
city = 'Birmingham'
```


### Proportions

```{python}
ax = build_plot(
    build_tab(db.query(f'GB_Name == "{city}"')),
    label=city,
    context=tab,
    figsize=(6, 6)
)

rects = ax.patches
labels = [i.get_text() for i in ax.get_yticklabels()]
for rect, label in zip(rects, labels):
    w = rect.get_width()
    ax.text(
        w + 5,
        rect.get_y() + rect.get_height() / 2,
        label,
        ha='left',
        va='center'
    )
```

### Map

```{python}
tmp = db.query(f'GB_Name == "{city}"')
ax = tmp.plot(
    color=tmp['type'].map(sig_colors).map(to_hex),
    linewidth=0,
    categorical=True,
    figsize=(5, 6)
)

plt.legend(
    handles=build_legend(tmp['type'].unique()), 
    bbox_to_anchor=(1, 0.9), 
    loc="upper left",
    frameon=False
)
ax.set_axis_off()
contextily.add_basemap(
    ax, crs=db.crs, source=contextily.providers.CartoDB.DarkMatterNoLabels
);
```

### Table

```{python}
build_tab(db.query(f'GB_Name == "{city}"'))
```

:::

## Newcastle

::: {.panel-tabset}

```{python}
city = 'Tyne and Wear'
```


### Proportions

```{python}
ax = build_plot(
    build_tab(db.query(f'GB_Name == "{city}"')),
    label=city,
    context=tab,
    figsize=(6, 6)
)

rects = ax.patches
labels = [i.get_text() for i in ax.get_yticklabels()]
for rect, label in zip(rects, labels):
    w = rect.get_width()
    ax.text(
        w + 5,
        rect.get_y() + rect.get_height() / 2,
        label,
        ha='left',
        va='center'
    )
```

### Map

```{python}
tmp = db.query(f'GB_Name == "{city}"')
ax = tmp.plot(
    color=tmp['type'].map(sig_colors).map(to_hex),
    linewidth=0,
    categorical=True,
    figsize=(5, 6)
)

plt.legend(
    handles=build_legend(tmp['type'].unique()), 
    bbox_to_anchor=(1, 0.9), 
    loc="upper left",
    frameon=False
)
ax.set_axis_off()
contextily.add_basemap(
    ax, crs=db.crs, source=contextily.providers.CartoDB.DarkMatterNoLabels
);
```

### Table

```{python}
build_tab(db.query(f'GB_Name == "{city}"'))
```

:::


# References
