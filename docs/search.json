[
  {
    "objectID": "signature_greenbelts.html",
    "href": "signature_greenbelts.html",
    "title": "Green Belts Capsule",
    "section": "",
    "text": "import geopandas, pandas\nfrom pyogrio import read_dataframe\n\n\n\n\n\nDownload if not available:\n\ngb_url = (\n    'https://maps.communities.gov.uk/geoserver/dclg_inspire/ows'\n    '?service=WFS&version=2.0.0&request=GetFeature&'\n    'typeName=dclg_inspire:England_Green_Belt_2017-18_WGS84&'\n    'outputFormat=json&srsName=EPSG:27700'\n)\n\nRead up:\n\n%%time\ngb = read_dataframe(\n    gb_url,\n    #where=\"GB_Name='Merseyside and Greater Manchester'\"\n)\n\nCPU times: user 4.46 s, sys: 491 ms, total: 4.95 s\nWall time: 16.3 s\n\n\n\n\n\n\nPull data if not present\n\n\ntry:\n    open('signatures.gpkg').close()\nexcept:\n    ! wget https://figshare.com/ndownloader/files/30904861 -O signatures.gpkg\n\n\nRead and clip\n\n\ndef read_clip(geom, p='signatures.gpkg'):\n    return geopandas.read_file(\n        p, mask=geom\n    ).clip(geom)\n\nimport dask.bag as db\nfrom dask.diagnostics import ProgressBar\n\nbag = db.from_sequence(gb.geometry.tolist()).map(read_clip)\nwith ProgressBar():\n    clipped = pandas.concat(bag.compute())\n\n[                                        ] | 0% Completed |  3.0s\n\n\nERROR 1: PROJ: proj_create_from_database: Open of /opt/conda/share/proj failed\nERROR 1: PROJ: proj_create_from_database: Open of /opt/conda/share/proj failed\nERROR 1: PROJ: proj_create_from_database: Open of /opt/conda/share/proj failed\nERROR 1: PROJ: proj_create_from_database: Open of /opt/conda/share/proj failed\nERROR 1: PROJ: proj_create_from_database: Open of /opt/conda/share/proj failed\nERROR 1: PROJ: proj_create_from_database: Open of /opt/conda/share/proj failed\nERROR 1: PROJ: proj_create_from_database: Open of /opt/conda/share/proj failed\nERROR 1: PROJ: proj_create_from_database: Open of /opt/conda/share/proj failed\n\n\n[########################################] | 100% Completed |  3min 21.3s\n\n\n\n\n\n\n\n\n\nareas = (\n    clipped\n    .assign(area=clipped.area/1e6)\n    .groupby('type')\n    ['area']\n    .sum()\n    .sort_values(ascending=False)\n)\npandas.DataFrame({'area_SqKm': areas, 'pct': areas * 100 / areas.sum()})\n\n\n\n\n\n  \n    \n      \n      area_SqKm\n      pct\n    \n    \n      type\n      \n      \n    \n  \n  \n    \n      Urban buffer\n      1159.736637\n      46.634218\n    \n    \n      Countryside agriculture\n      949.702936\n      38.188544\n    \n    \n      Open sprawl\n      276.501964\n      11.118432\n    \n    \n      Warehouse/Park land\n      64.006638\n      2.573774\n    \n    \n      Accessible suburbia\n      26.218758\n      1.054284\n    \n    \n      Wild countryside\n      4.106897\n      0.165143\n    \n    \n      Connected residential neighbourhoods\n      2.882481\n      0.115908\n    \n    \n      Dense residential neighbourhoods\n      2.162715\n      0.086965\n    \n    \n      Disconnected suburbia\n      1.517039\n      0.061002\n    \n    \n      Dense urban neighbourhoods\n      0.026317\n      0.001058\n    \n    \n      Gridded residential quarters\n      0.016737\n      0.000673\n    \n  \n\n\n\n\n\nclipped.dissolve('type').reset_index().explore(\n    column='type', categorical=True, tiles='CartoDB dark_matter'\n)\n\n\n\n\n\n\nclipped_all = geopandas.read_parquet('ss_clipped.pq')\nareas = (\n    clipped_all\n    .assign(area=clipped_all.area/1e6)\n    .groupby('type')\n    ['area']\n    .sum()\n    .sort_values(ascending=False)\n)\npandas.DataFrame({'area_SqKm': areas, 'pct': areas * 100 / areas.sum()})\n\n\n\n\n\n  \n    \n      \n      area_SqKm\n      pct\n    \n    \n      type\n      \n      \n    \n  \n  \n    \n      Urban buffer\n      7616.285193\n      47.000857\n    \n    \n      Countryside agriculture\n      7070.798905\n      43.634607\n    \n    \n      Open sprawl\n      828.546604\n      5.113044\n    \n    \n      Warehouse/Park land\n      441.630946\n      2.725349\n    \n    \n      Wild countryside\n      122.253761\n      0.754440\n    \n    \n      Accessible suburbia\n      90.120589\n      0.556143\n    \n    \n      Dense residential neighbourhoods\n      14.027865\n      0.086567\n    \n    \n      Disconnected suburbia\n      7.759982\n      0.047888\n    \n    \n      Dense urban neighbourhoods\n      6.503345\n      0.040133\n    \n    \n      Connected residential neighbourhoods\n      5.454813\n      0.033662\n    \n    \n      Hyper concentrated urbanity\n      0.915522\n      0.005650\n    \n    \n      Local urbanity\n      0.182910\n      0.001129\n    \n    \n      Gridded residential quarters\n      0.086033\n      0.000531\n    \n  \n\n\n\n\n\n%%time\ndiss = clipped.dissolve('type')\n\nCPU times: user 1min 3s, sys: 262 ms, total: 1min 4s\nWall time: 1min 4s\n\n\n\ndiss\n\n\n\n\n\n  \n    \n      \n      geometry\n      id\n      code\n    \n    \n      type\n      \n      \n      \n    \n  \n  \n    \n      Accessible suburbia\n      MULTIPOLYGON (((345756.808 364158.178, 345757....\n      16693_ACS\n      ACS\n    \n    \n      Connected residential neighbourhoods\n      MULTIPOLYGON (((357445.040 170360.777, 357455....\n      87517_CRN\n      CRN\n    \n    \n      Countryside agriculture\n      MULTIPOLYGON (((344905.850 166541.448, 344906....\n      459_COA\n      COA\n    \n    \n      Dense residential neighbourhoods\n      MULTIPOLYGON (((321066.452 387154.549, 321067....\n      82049_DRN\n      DRN\n    \n    \n      Dense urban neighbourhoods\n      MULTIPOLYGON (((451541.205 205161.991, 451539....\n      93538_DUN\n      DUN\n    \n    \n      Disconnected suburbia\n      MULTIPOLYGON (((389295.261 287291.254, 389295....\n      72390_DIS\n      DIS\n    \n    \n      Gridded residential quarters\n      MULTIPOLYGON (((430895.112 280263.914, 430896....\n      57941_GRQ\n      GRQ\n    \n    \n      Hyper concentrated urbanity\n      MULTIPOLYGON (((581550.000 185035.000, 581759....\n      96691_HDU\n      HDU\n    \n    \n      Local urbanity\n      MULTIPOLYGON (((451614.396 205420.349, 451503....\n      95707_LOU\n      LOU\n    \n    \n      Open sprawl\n      MULTIPOLYGON (((345032.833 175629.286, 345030....\n      29785_OPS\n      OPS\n    \n    \n      Urban buffer\n      MULTIPOLYGON (((347236.760 162524.876, 347253....\n      64309_URB\n      URB\n    \n    \n      Warehouse/Park land\n      MULTIPOLYGON (((356478.202 172281.238, 356470....\n      50397_WAL\n      WAL\n    \n    \n      Wild countryside\n      MULTIPOLYGON (((374257.555 170517.166, 374267....\n      44107_WIC\n      WIC\n    \n  \n\n\n\n\n\ndiss.reset_index().plot(\n    column='type', categorical=True, legend=True, figsize=(18, 18)\n)\n\n<AxesSubplot:>\n\n\n\n\n\n\n\nClip signatures to green belts\n\nCalculate area of green belt by signature"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Green Belts Capsule",
    "section": "",
    "text": "This resource is part of the Urban Grammar project and contains a capsule. Capsules are informally defined as bits of work that take “more than a blog post but less than anything else”. Capsules are explorations of how the data products generated by the Urban Grammar are useful in a variety of contexts. They are data-driven narratives, presented in as close to fully reproducible way as possible and, as the name suggest, encapsulated in their own repository so they are portable.\nIf you need to, you can cite this capsule using the following citation:\n@misc{arribasbel2023epc_capsule,\n  title        = \"Green Belts Capsule\",\n  author       = \"{Dani Arribas-Bel}\",\n  howpublished = \"\\url{https://urbangrammarai.xyz/green_belts_capsule}\",\n  year         = 2023,\n  doi          = \"TBC\"\n}"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Urban Grammar - Green Belts Capsule",
    "section": "",
    "text": "This capsule considers the make up of green belt areas in England using the Spatial Signatures (Fleischmann and Arribas-Bel 2022)."
  },
  {
    "objectID": "index.html#london",
    "href": "index.html#london",
    "title": "Urban Grammar - Green Belts Capsule",
    "section": "London",
    "text": "London"
  },
  {
    "objectID": "index.html#manchester",
    "href": "index.html#manchester",
    "title": "Urban Grammar - Green Belts Capsule",
    "section": "Manchester",
    "text": "Manchester"
  },
  {
    "objectID": "index.html#birmingham",
    "href": "index.html#birmingham",
    "title": "Urban Grammar - Green Belts Capsule",
    "section": "Birmingham",
    "text": "Birmingham"
  },
  {
    "objectID": "index.html#liverpool",
    "href": "index.html#liverpool",
    "title": "Urban Grammar - Green Belts Capsule",
    "section": "Liverpool",
    "text": "Liverpool"
  },
  {
    "objectID": "index.html#newcastle",
    "href": "index.html#newcastle",
    "title": "Urban Grammar - Green Belts Capsule",
    "section": "Newcastle",
    "text": "Newcastle"
  },
  {
    "objectID": "data_acquisition.html",
    "href": "data_acquisition.html",
    "title": "Green Belts Capsule",
    "section": "",
    "text": "import geopandas, pandas\nfrom pyogrio import read_dataframe\n\n\n\nDownload if not available:\n\ngb_url = (\n    'https://maps.communities.gov.uk/geoserver/dclg_inspire/ows'\n    '?service=WFS&version=2.0.0&request=GetFeature&'\n    'typeName=dclg_inspire:England_Green_Belt_2017-18_WGS84&'\n    'outputFormat=json&srsName=EPSG:27700'\n)\n\nRead up:\n\n%%time\ngb = read_dataframe(\n    gb_url,\n    #where=\"GB_Name='Merseyside and Greater Manchester'\"\n)\n\nCPU times: user 4.46 s, sys: 491 ms, total: 4.95 s\nWall time: 16.3 s\n\n\n\n\n\n\nPull data if not present\n\n\ntry:\n    open('signatures.gpkg').close()\nexcept:\n    ! wget https://figshare.com/ndownloader/files/30904861 -O signatures.gpkg\n\n\nRead and clip\n\n\ndef read_clip(geom, p='signatures.gpkg'):\n    return geopandas.read_file(\n        p, mask=geom\n    ).clip(geom)\n\nimport dask.bag as db\nfrom dask.diagnostics import ProgressBar\n\nbag = db.from_sequence(gb.geometry.tolist()).map(read_clip)\nwith ProgressBar():\n    clipped = pandas.concat(bag.compute())\n\n[                                        ] | 0% Completed |  3.0s\n\n\nERROR 1: PROJ: proj_create_from_database: Open of /opt/conda/share/proj failed\nERROR 1: PROJ: proj_create_from_database: Open of /opt/conda/share/proj failed\nERROR 1: PROJ: proj_create_from_database: Open of /opt/conda/share/proj failed\nERROR 1: PROJ: proj_create_from_database: Open of /opt/conda/share/proj failed\nERROR 1: PROJ: proj_create_from_database: Open of /opt/conda/share/proj failed\nERROR 1: PROJ: proj_create_from_database: Open of /opt/conda/share/proj failed\nERROR 1: PROJ: proj_create_from_database: Open of /opt/conda/share/proj failed\nERROR 1: PROJ: proj_create_from_database: Open of /opt/conda/share/proj failed\n\n\n[########################################] | 100% Completed |  3min 21.3s\n\n\n\n\n\nclipped.to_parquet('ss_clipped.pq')"
  }
]