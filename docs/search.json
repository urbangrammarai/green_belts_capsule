[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Green Belts Capsule",
    "section": "",
    "text": "This resource is part of the Urban Grammar project and contains a capsule. Capsules are informally defined as bits of work that take “more than a blog post but less than anything else”. Capsules are explorations of how the data products generated by the Urban Grammar are useful in a variety of contexts. They are data-driven narratives, presented in as close to fully reproducible way as possible and, as the name suggest, encapsulated in their own repository so they are portable.\nIf you need to, you can cite this capsule using the following citation:\n@misc{arribasbel2023epc_capsule,\n  title        = \"Green Belts Capsule\",\n  author       = \"{Dani Arribas-Bel}\",\n  howpublished = \"\\url{https://urbangrammarai.xyz/green_belts_capsule}\",\n  year         = 2023,\n  doi          = \"10.5281/zenodo.7709786\"\n}"
  },
  {
    "objectID": "signature_greenbelts.html",
    "href": "signature_greenbelts.html",
    "title": "Green Belts Capsule",
    "section": "",
    "text": "import geopandas, pandas\nfrom pyogrio import read_dataframe\n\n\n\n\n\nDownload if not available:\n\ngb_url = (\n    'https://maps.communities.gov.uk/geoserver/dclg_inspire/ows'\n    '?service=WFS&version=2.0.0&request=GetFeature&'\n    'typeName=dclg_inspire:England_Green_Belt_2017-18_WGS84&'\n    'outputFormat=json&srsName=EPSG:27700'\n)\n\nRead up:\n\n%%time\ngb = read_dataframe(\n    gb_url,\n    #where=\"GB_Name='Merseyside and Greater Manchester'\"\n)\n\nCPU times: user 4.46 s, sys: 491 ms, total: 4.95 s\nWall time: 16.3 s\n\n\n\n\n\n\nPull data if not present\n\n\ntry:\n    open('signatures.gpkg').close()\nexcept:\n    ! wget https://figshare.com/ndownloader/files/30904861 -O signatures.gpkg\n\n\nRead and clip\n\n\ndef read_clip(geom, p='signatures.gpkg'):\n    return geopandas.read_file(\n        p, mask=geom\n    ).clip(geom)\n\nimport dask.bag as db\nfrom dask.diagnostics import ProgressBar\n\nbag = db.from_sequence(gb.geometry.tolist()).map(read_clip)\nwith ProgressBar():\n    clipped = pandas.concat(bag.compute())\n\n[                                        ] | 0% Completed |  3.0s\n\n\nERROR 1: PROJ: proj_create_from_database: Open of /opt/conda/share/proj failed\nERROR 1: PROJ: proj_create_from_database: Open of /opt/conda/share/proj failed\nERROR 1: PROJ: proj_create_from_database: Open of /opt/conda/share/proj failed\nERROR 1: PROJ: proj_create_from_database: Open of /opt/conda/share/proj failed\nERROR 1: PROJ: proj_create_from_database: Open of /opt/conda/share/proj failed\nERROR 1: PROJ: proj_create_from_database: Open of /opt/conda/share/proj failed\nERROR 1: PROJ: proj_create_from_database: Open of /opt/conda/share/proj failed\nERROR 1: PROJ: proj_create_from_database: Open of /opt/conda/share/proj failed\n\n\n[########################################] | 100% Completed |  3min 21.3s\n\n\n\n\n\n\n\n\n\nareas = (\n    clipped\n    .assign(area=clipped.area/1e6)\n    .groupby('type')\n    ['area']\n    .sum()\n    .sort_values(ascending=False)\n)\npandas.DataFrame({'area_SqKm': areas, 'pct': areas * 100 / areas.sum()})\n\n\n\n\n\n  \n    \n      \n      area_SqKm\n      pct\n    \n    \n      type\n      \n      \n    \n  \n  \n    \n      Urban buffer\n      1159.736637\n      46.634218\n    \n    \n      Countryside agriculture\n      949.702936\n      38.188544\n    \n    \n      Open sprawl\n      276.501964\n      11.118432\n    \n    \n      Warehouse/Park land\n      64.006638\n      2.573774\n    \n    \n      Accessible suburbia\n      26.218758\n      1.054284\n    \n    \n      Wild countryside\n      4.106897\n      0.165143\n    \n    \n      Connected residential neighbourhoods\n      2.882481\n      0.115908\n    \n    \n      Dense residential neighbourhoods\n      2.162715\n      0.086965\n    \n    \n      Disconnected suburbia\n      1.517039\n      0.061002\n    \n    \n      Dense urban neighbourhoods\n      0.026317\n      0.001058\n    \n    \n      Gridded residential quarters\n      0.016737\n      0.000673\n    \n  \n\n\n\n\n\nclipped.dissolve('type').reset_index().explore(\n    column='type', categorical=True, tiles='CartoDB dark_matter'\n)\n\n\n\n\n\n\nclipped_all = geopandas.read_parquet('ss_clipped.pq')\nareas = (\n    clipped_all\n    .assign(area=clipped_all.area/1e6)\n    .groupby('type')\n    ['area']\n    .sum()\n    .sort_values(ascending=False)\n)\npandas.DataFrame({'area_SqKm': areas, 'pct': areas * 100 / areas.sum()})\n\n\n\n\n\n  \n    \n      \n      area_SqKm\n      pct\n    \n    \n      type\n      \n      \n    \n  \n  \n    \n      Urban buffer\n      7616.285193\n      47.000857\n    \n    \n      Countryside agriculture\n      7070.798905\n      43.634607\n    \n    \n      Open sprawl\n      828.546604\n      5.113044\n    \n    \n      Warehouse/Park land\n      441.630946\n      2.725349\n    \n    \n      Wild countryside\n      122.253761\n      0.754440\n    \n    \n      Accessible suburbia\n      90.120589\n      0.556143\n    \n    \n      Dense residential neighbourhoods\n      14.027865\n      0.086567\n    \n    \n      Disconnected suburbia\n      7.759982\n      0.047888\n    \n    \n      Dense urban neighbourhoods\n      6.503345\n      0.040133\n    \n    \n      Connected residential neighbourhoods\n      5.454813\n      0.033662\n    \n    \n      Hyper concentrated urbanity\n      0.915522\n      0.005650\n    \n    \n      Local urbanity\n      0.182910\n      0.001129\n    \n    \n      Gridded residential quarters\n      0.086033\n      0.000531\n    \n  \n\n\n\n\n\n%%time\ndiss = clipped.dissolve('type')\n\nCPU times: user 1min 3s, sys: 262 ms, total: 1min 4s\nWall time: 1min 4s\n\n\n\ndiss\n\n\n\n\n\n  \n    \n      \n      geometry\n      id\n      code\n    \n    \n      type\n      \n      \n      \n    \n  \n  \n    \n      Accessible suburbia\n      MULTIPOLYGON (((345756.808 364158.178, 345757....\n      16693_ACS\n      ACS\n    \n    \n      Connected residential neighbourhoods\n      MULTIPOLYGON (((357445.040 170360.777, 357455....\n      87517_CRN\n      CRN\n    \n    \n      Countryside agriculture\n      MULTIPOLYGON (((344905.850 166541.448, 344906....\n      459_COA\n      COA\n    \n    \n      Dense residential neighbourhoods\n      MULTIPOLYGON (((321066.452 387154.549, 321067....\n      82049_DRN\n      DRN\n    \n    \n      Dense urban neighbourhoods\n      MULTIPOLYGON (((451541.205 205161.991, 451539....\n      93538_DUN\n      DUN\n    \n    \n      Disconnected suburbia\n      MULTIPOLYGON (((389295.261 287291.254, 389295....\n      72390_DIS\n      DIS\n    \n    \n      Gridded residential quarters\n      MULTIPOLYGON (((430895.112 280263.914, 430896....\n      57941_GRQ\n      GRQ\n    \n    \n      Hyper concentrated urbanity\n      MULTIPOLYGON (((581550.000 185035.000, 581759....\n      96691_HDU\n      HDU\n    \n    \n      Local urbanity\n      MULTIPOLYGON (((451614.396 205420.349, 451503....\n      95707_LOU\n      LOU\n    \n    \n      Open sprawl\n      MULTIPOLYGON (((345032.833 175629.286, 345030....\n      29785_OPS\n      OPS\n    \n    \n      Urban buffer\n      MULTIPOLYGON (((347236.760 162524.876, 347253....\n      64309_URB\n      URB\n    \n    \n      Warehouse/Park land\n      MULTIPOLYGON (((356478.202 172281.238, 356470....\n      50397_WAL\n      WAL\n    \n    \n      Wild countryside\n      MULTIPOLYGON (((374257.555 170517.166, 374267....\n      44107_WIC\n      WIC\n    \n  \n\n\n\n\n\ndiss.reset_index().plot(\n    column='type', categorical=True, legend=True, figsize=(18, 18)\n)\n\n<AxesSubplot:>\n\n\n\n\n\n\n\nClip signatures to green belts\n\nCalculate area of green belt by signature"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Urban Grammar - Green Belts Capsule",
    "section": "",
    "text": "This capsule1 considers the make up of green belt areas in England using the Spatial Signatures (Fleischmann and Arribas-Bel 2022). You can see more on the data used, and how they have been combined, in the Data Aquisition section. We reserve this document to present the main results.1 \n\n\n\n\n\n\n\nCode\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport pandas\nimport geopandas\nimport json\nimport requests\nimport contextily\nimport xyzservices\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as mpatches\nfrom matplotlib.colors import to_hex\nimport urbangrammar_graphics as ugg\n\ndef build_tab(db):\n    areas = (\n      db\n      .assign(area=db.area/1e6)\n      .groupby('type')\n      ['area']\n      .sum()\n      .sort_values(ascending=False)\n    )\n    tab = pandas.DataFrame(\n      {'Area (Sq.Km)': areas, '% of total area': areas * 100 / areas.sum()}\n    )\n    return tab.round(2)\n\ndef build_plot(tab, label=None, context=None, figsize=(2, 6)):\n    ttp = tab['% of total area'].sort_values()\n    ax = ttp.plot.barh(\n        color='k', \n        figsize=figsize, \n        title='% of area by signature',\n        label=label\n    )\n    if context is not None:\n        (\n            context\n            ['% of total area']\n            .reindex(ttp.index)\n            .plot.barh(\n                edgecolor='#8fa37e', \n                facecolor='none', \n                linewidth=2,\n                ax=ax,\n                label='National'\n            )\n        )\n    ax.set_axis_off()\n    if (label is not None) and (context is not None):\n        plt.legend(loc='lower right', frameon=False)\n    return ax\n\ndef get_signature_colors(name=True):\n    \"\"\"\n    Ported from here as unreleased:\n    https://github.com/urbangrammarai/graphics/blob/69bf5976a11c783fc8a27f59ef57efefbbee6aa8/urbangrammar_graphics/graphics.py#L207-L272\n    Get a dictionary of colors mapped to signatures classes of Great Britain\n    Parameters\n    ----------\n    name : bool\n        `True` maps to names, `False` maps to string keys (e.g. `'2_1'`)\n    Returns\n    -------\n    dict\n    \"\"\"\n    cols = ugg.get_colormap(20, randomize=False).colors\n\n    key = {\n        \"0_0\": cols[16],\n        \"1_0\": cols[15],\n        \"3_0\": cols[9],\n        \"4_0\": cols[12],\n        \"5_0\": cols[21],\n        \"6_0\": cols[8],\n        \"7_0\": cols[4],\n        \"8_0\": cols[18],\n        \"2_0\": cols[6],\n        \"2_1\": cols[23],\n        \"2_2\": cols[19],\n        \"9_0\": cols[7],\n        \"9_1\": cols[3],\n        \"9_2\": cols[22],\n        \"9_3\": cols[0],  # outlier\n        \"9_4\": cols[11],\n        \"9_5\": cols[14],\n        \"9_6\": cols[0],  # outlier\n        \"9_7\": cols[0],  # outlier\n        \"9_8\": cols[0],  # outlier\n    }\n\n    if name:\n        types = {\n            \"0_0\": \"Countryside agriculture\",\n            \"1_0\": \"Accessible suburbia\",\n            \"3_0\": \"Open sprawl\",\n            \"4_0\": \"Wild countryside\",\n            \"5_0\": \"Warehouse/Park land\",\n            \"6_0\": \"Gridded residential quarters\",\n            \"7_0\": \"Urban buffer\",\n            \"8_0\": \"Disconnected suburbia\",\n            \"2_0\": \"Dense residential neighbourhoods\",\n            \"2_1\": \"Connected residential neighbourhoods\",\n            \"2_2\": \"Dense urban neighbourhoods\",\n            \"9_0\": \"Local urbanity\",\n            \"9_1\": \"Concentrated urbanity\",\n            \"9_2\": \"Regional urbanity\",\n            \"9_4\": \"Metropolitan urbanity\",\n            \"9_5\": \"Hyper concentrated urbanity\",\n            \"9_3\": \"outlier\",\n            \"9_6\": \"outlier\",\n            \"9_7\": \"outlier\",\n            \"9_8\": \"outlier\",\n        }\n\n        return {v: key[k] for k, v in types.items()}\n\n    return key\nsig_colors = get_signature_colors()\n\ndef build_legend(types, sig_colors=sig_colors):\n    ps = []\n    for t in types:\n        type_patch = mpatches.Patch(color=sig_colors[t], label=t)\n        ps.append(type_patch)\n    return ps\n\ndb = geopandas.read_parquet('ss_clipped.pq')"
  },
  {
    "objectID": "index.html#london",
    "href": "index.html#london",
    "title": "Urban Grammar - Green Belts Capsule",
    "section": "London",
    "text": "London\n\nProportionsMapTable\n\n\n\n\nCode\nax = build_plot(\n    build_tab(db.query(f'GB_Name == \"{city}\"')),\n    label=city,\n    context=tab,\n    figsize=(6, 6)\n)\n\nrects = ax.patches\nlabels = [i.get_text() for i in ax.get_yticklabels()]\nfor rect, label in zip(rects, labels):\n    w = rect.get_width()\n    ax.text(\n        w + 5,\n        rect.get_y() + rect.get_height() / 2,\n        label,\n        ha='left',\n        va='center'\n    )\n\n\n\n\n\n\n\n\n\nCode\ntmp = db.query(f'GB_Name == \"{city}\"')\nax = tmp.plot(\n    color=tmp['type'].map(sig_colors).map(to_hex),\n    linewidth=0,\n    categorical=True,\n    figsize=(5, 6)\n)\n\nplt.legend(\n    handles=build_legend(tmp['type'].unique()), \n    bbox_to_anchor=(1, 0.9), \n    loc=\"upper left\",\n    frameon=False\n)\nax.set_axis_off()\ncontextily.add_basemap(\n    ax, crs=db.crs, source=contextily.providers.CartoDB.DarkMatterNoLabels\n);\n\n\n\n\n\n\n\n\n\nCode\nbuild_tab(db.query(f'GB_Name == \"{city}\"'))\n\n\n\n\n\n\n  \n    \n      \n      Area (Sq.Km)\n      % of total area\n    \n    \n      type\n      \n      \n    \n  \n  \n    \n      Urban buffer\n      2499.68\n      48.80\n    \n    \n      Countryside agriculture\n      2224.66\n      43.44\n    \n    \n      Open sprawl\n      173.90\n      3.40\n    \n    \n      Warehouse/Park land\n      171.94\n      3.36\n    \n    \n      Accessible suburbia\n      24.43\n      0.48\n    \n    \n      Dense residential neighbourhoods\n      8.06\n      0.16\n    \n    \n      Wild countryside\n      7.34\n      0.14\n    \n    \n      Dense urban neighbourhoods\n      5.39\n      0.11\n    \n    \n      Disconnected suburbia\n      3.77\n      0.07\n    \n    \n      Connected residential neighbourhoods\n      1.60\n      0.03\n    \n    \n      Hyper concentrated urbanity\n      0.92\n      0.02\n    \n    \n      Local urbanity\n      0.12\n      0.00"
  },
  {
    "objectID": "index.html#proportions",
    "href": "index.html#proportions",
    "title": "Urban Grammar - Green Belts Capsule",
    "section": "Proportions",
    "text": "Proportions\n\n\nCode\nax = build_plot(\n    build_tab(db.query('GB_Name == \"London\"')),\n    label='London',\n    context=tab,\n    figsize=(6, 6)\n)\n\nrects = ax.patches\nlabels = [i.get_text() for i in ax.get_yticklabels()]\nfor rect, label in zip(rects, labels):\n    w = rect.get_width()\n    ax.text(\n        w + 5,\n        rect.get_y() + rect.get_height() / 2,\n        label,\n        ha='left',\n        va='center'\n    )"
  },
  {
    "objectID": "index.html#map",
    "href": "index.html#map",
    "title": "Urban Grammar - Green Belts Capsule",
    "section": "Map",
    "text": "Map\n\n\nCode\ntmp = dbs.query('GB_Name == \"London\"')\ntmp.explore(\n    'type',\n    tooltip=['type'],\n    color=tmp['type'].map(sig_colors).map(to_hex),\n    legend=False,\n    tiles=xyzservices.providers.Esri.WorldImagery\n)\n\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook"
  },
  {
    "objectID": "index.html#table",
    "href": "index.html#table",
    "title": "Urban Grammar - Green Belts Capsule",
    "section": "Table",
    "text": "Table\n\n\nCode\nbuild_tab(db.query('GB_Name == \"London\"'))\n\n\n\n\n\n\n  \n    \n      \n      Area (Sq.Km)\n      % of total area\n    \n    \n      type\n      \n      \n    \n  \n  \n    \n      Urban buffer\n      2499.68\n      48.80\n    \n    \n      Countryside agriculture\n      2224.66\n      43.44\n    \n    \n      Open sprawl\n      173.90\n      3.40\n    \n    \n      Warehouse/Park land\n      171.94\n      3.36\n    \n    \n      Accessible suburbia\n      24.43\n      0.48\n    \n    \n      Dense residential neighbourhoods\n      8.06\n      0.16\n    \n    \n      Wild countryside\n      7.34\n      0.14\n    \n    \n      Dense urban neighbourhoods\n      5.39\n      0.11\n    \n    \n      Disconnected suburbia\n      3.77\n      0.07\n    \n    \n      Connected residential neighbourhoods\n      1.60\n      0.03\n    \n    \n      Hyper concentrated urbanity\n      0.92\n      0.02\n    \n    \n      Local urbanity\n      0.12\n      0.00\n    \n  \n\n\n\n\n\nManchester\nBirmingham\nLiverpool\nNewcastle"
  },
  {
    "objectID": "data_acquisition.html",
    "href": "data_acquisition.html",
    "title": "Green Belts Capsule",
    "section": "",
    "text": "import geopandas, pandas\nfrom pyogrio import read_dataframe\n\nERROR 1: PROJ: proj_create_from_database: Open of /opt/conda/share/proj failed\n\n\n\n\nDownload if not available:\n\ngb_url = (\n    'https://maps.communities.gov.uk/geoserver/dclg_inspire/ows'\n    '?service=WFS&version=2.0.0&request=GetFeature&'\n    'typeName=dclg_inspire:England_Green_Belt_2017-18_WGS84&'\n    'outputFormat=json&srsName=EPSG:27700'\n)\n\nRead up:\n\n%%time\ngb = read_dataframe(\n    gb_url,\n    #where=\"GB_Name='Merseyside and Greater Manchester'\"\n)\n\nCPU times: user 3.3 s, sys: 340 ms, total: 3.64 s\nWall time: 14.8 s\n\n\n\n\n\n\nPull data if not present\n\n\ntry:\n    open('signatures.gpkg').close()\nexcept:\n    ! wget https://figshare.com/ndownloader/files/30904861 -O signatures.gpkg\n\n--2023-02-16 10:27:30--  https://figshare.com/ndownloader/files/30904861\nResolving figshare.com (figshare.com)... 46.137.13.70, 63.33.127.36, 2a05:d018:1f4:d003:2d08:7968:d247:2fb8, ...\nConnecting to figshare.com (figshare.com)|46.137.13.70|:443... connected.\nHTTP request sent, awaiting response... 302 Found\nLocation: https://s3-eu-west-1.amazonaws.com/pfigshare-u-files/30904861/spatial_signatures_GB.gpkg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIYCQYOYV5JSSROOA/20230216/eu-west-1/s3/aws4_request&X-Amz-Date=20230216T102730Z&X-Amz-Expires=10&X-Amz-SignedHeaders=host&X-Amz-Signature=04d758bcf56e9e5628d023e3762610ae92bec7d0f1f592b2943805a8acfba07e [following]\n--2023-02-16 10:27:30--  https://s3-eu-west-1.amazonaws.com/pfigshare-u-files/30904861/spatial_signatures_GB.gpkg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIYCQYOYV5JSSROOA/20230216/eu-west-1/s3/aws4_request&X-Amz-Date=20230216T102730Z&X-Amz-Expires=10&X-Amz-SignedHeaders=host&X-Amz-Signature=04d758bcf56e9e5628d023e3762610ae92bec7d0f1f592b2943805a8acfba07e\nResolving s3-eu-west-1.amazonaws.com (s3-eu-west-1.amazonaws.com)... 52.218.105.122, 52.92.32.48, 52.92.34.24, ...\nConnecting to s3-eu-west-1.amazonaws.com (s3-eu-west-1.amazonaws.com)|52.218.105.122|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 909824000 (868M) [application/octet-stream]\nSaving to: ‘signatures.gpkg’\n\nsignatures.gpkg     100%[===================>] 867.68M  31.6MB/s    in 23s     \n\n2023-02-16 10:27:53 (37.9 MB/s) - ‘signatures.gpkg’ saved [909824000/909824000]\n\n\n\n\nRead and clip\n\n\ndef read_clip(irow, p='signatures.gpkg'):\n    i, row = irow\n    geom = row.geometry\n    out = geopandas.read_file(\n        p, mask=geom\n    ).clip(geom)\n    for col in ['LA_Code', 'LA_Name', 'GB_Name']:\n        out[col] = row[col]\n    return out\n\nimport dask.bag as db\nfrom dask.diagnostics import ProgressBar\n\nbag = db.from_sequence(gb.iterrows()).map(read_clip)\nwith ProgressBar():\n    clipped = pandas.concat(bag.compute())\n\n[                                        ] | 0% Completed |  2.0s\n\n\nERROR 1: PROJ: proj_create_from_database: Open of /opt/conda/share/proj failed\nERROR 1: PROJ: proj_create_from_database: Open of /opt/conda/share/proj failed\nERROR 1: PROJ: proj_create_from_database: Open of /opt/conda/share/proj failed\n\n\n[                                        ] | 0% Completed |  2.2s\n\n\nERROR 1: PROJ: proj_create_from_database: Open of /opt/conda/share/proj failed\nERROR 1: PROJ: proj_create_from_database: Open of /opt/conda/share/proj failed\nERROR 1: PROJ: proj_create_from_database: Open of /opt/conda/share/proj failed\nERROR 1: PROJ: proj_create_from_database: Open of /opt/conda/share/proj failed\nERROR 1: PROJ: proj_create_from_database: Open of /opt/conda/share/proj failed\n\n\n[                                        ] | 0% Completed |  2.5s\n\n\nERROR 1: PROJ: proj_create_from_database: Open of /opt/conda/share/proj failed\nERROR 1: PROJ: proj_create_from_database: Open of /opt/conda/share/proj failed\nERROR 1: PROJ: proj_create_from_database: Open of /opt/conda/share/proj failed\nERROR 1: PROJ: proj_create_from_database: Open of /opt/conda/share/proj failed\n\n\n[                                        ] | 0% Completed |  2.7s\n\n\nERROR 1: PROJ: proj_create_from_database: Open of /opt/conda/share/proj failed\nERROR 1: PROJ: proj_create_from_database: Open of /opt/conda/share/proj failed\nERROR 1: PROJ: proj_create_from_database: Open of /opt/conda/share/proj failed\n\n\n[                                        ] | 0% Completed |  3.2s\n\n\nERROR 1: PROJ: proj_create_from_database: Open of /opt/conda/share/proj failed\n\n\n[########################################] | 100% Completed |  3min 57.4s\n\n\n\n\n\n\n(\n    clipped\n    .reset_index()\n    .drop(columns=['index', 'id'])\n    .to_parquet('ss_clipped.pq')\n)\n\n/tmp/ipykernel_96/2760393140.py:2: UserWarning: this is an initial implementation of Parquet/Feather file support and associated metadata.  This is tracking version 0.1.0 of the metadata specification at https://github.com/geopandas/geo-arrow-spec\n\nThis metadata specification does not yet make stability promises.  We do not yet recommend using this in a production setting unless you are able to rewrite your Parquet/Feather files.\n\nTo further ignore this warning, you can do: \nimport warnings; warnings.filterwarnings('ignore', message='.*initial implementation of Parquet.*')\n  clipped"
  },
  {
    "objectID": "index.html#manchester",
    "href": "index.html#manchester",
    "title": "Urban Grammar - Green Belts Capsule",
    "section": "Manchester",
    "text": "Manchester\n\n\nCode\ncity = 'Manchester'\n\n\n\nProportions\n\n\nCode\nax = build_plot(\n    build_tab(db.query('GB_Name == \"London\"')),\n    label=city,\n    context=tab,\n    figsize=(6, 6)\n)\n\nrects = ax.patches\nlabels = [i.get_text() for i in ax.get_yticklabels()]\nfor rect, label in zip(rects, labels):\n    w = rect.get_width()\n    ax.text(\n        w + 5,\n        rect.get_y() + rect.get_height() / 2,\n        label,\n        ha='left',\n        va='center'\n    )\n\n\n\n\n\n\n\nMap\n\n\nCode\ntmp = db.query(f'GB_Name == \"{city}\"')\nax = tmp.plot(\n    color=tmp['type'].map(sig_colors).map(to_hex),\n    linewidth=0,\n    categorical=True,\n    figsize=(5, 6)\n)\n\nplt.legend(\n    handles=build_legend(tmp['type'].unique()), \n    bbox_to_anchor=(1, 0.9), \n    loc=\"upper left\",\n    frameon=False\n)\nax.set_axis_off()\ncontextily.add_basemap(\n    ax, crs=dbs.crs, source=contextily.providers.CartoDB.DarkMatterNoLabels\n);\n\n\n\n\n\n\n\nTable\n\n\nCode\nbuild_tab(db.query(f'GB_Name == \"{city}\"'))\n\n\n\n\n\n\n  \n    \n      \n      Area (Sq.Km)\n      % of total area\n    \n    \n      type\n      \n      \n    \n  \n  \n  \n\n\n\n\n:::\n\nManchester\nBirmingham\nLiverpool\nNewcastle"
  },
  {
    "objectID": "index.html#manchester-liverpool",
    "href": "index.html#manchester-liverpool",
    "title": "Urban Grammar - Green Belts Capsule",
    "section": "Manchester & Liverpool",
    "text": "Manchester & Liverpool\n\nProportionsMapTable\n\n\n\n\nCode\nax = build_plot(\n    build_tab(db.query('GB_Name == \"London\"')),\n    label=city,\n    context=tab,\n    figsize=(6, 6)\n)\n\nrects = ax.patches\nlabels = [i.get_text() for i in ax.get_yticklabels()]\nfor rect, label in zip(rects, labels):\n    w = rect.get_width()\n    ax.text(\n        w + 5,\n        rect.get_y() + rect.get_height() / 2,\n        label,\n        ha='left',\n        va='center'\n    )\n\n\n\n\n\n\n\n\n\nCode\ntmp = db.query(f'GB_Name == \"{city}\"')\nax = tmp.plot(\n    color=tmp['type'].map(sig_colors).map(to_hex),\n    linewidth=0,\n    categorical=True,\n    figsize=(5, 6)\n)\n\nplt.legend(\n    handles=build_legend(tmp['type'].unique()), \n    bbox_to_anchor=(1, 0.9), \n    loc=\"upper left\",\n    frameon=False\n)\nax.set_axis_off()\ncontextily.add_basemap(\n    ax, crs=db.crs, source=contextily.providers.CartoDB.DarkMatterNoLabels\n);\n\n\n\n\n\n\n\n\n\nCode\nbuild_tab(db.query(f'GB_Name == \"{city}\"'))\n\n\n\n\n\n\n  \n    \n      \n      Area (Sq.Km)\n      % of total area\n    \n    \n      type\n      \n      \n    \n  \n  \n    \n      Urban buffer\n      1159.74\n      46.63\n    \n    \n      Countryside agriculture\n      949.70\n      38.19\n    \n    \n      Open sprawl\n      276.50\n      11.12\n    \n    \n      Warehouse/Park land\n      64.01\n      2.57\n    \n    \n      Accessible suburbia\n      26.22\n      1.05\n    \n    \n      Wild countryside\n      4.11\n      0.17\n    \n    \n      Connected residential neighbourhoods\n      2.88\n      0.12\n    \n    \n      Dense residential neighbourhoods\n      2.16\n      0.09\n    \n    \n      Disconnected suburbia\n      1.52\n      0.06\n    \n    \n      Dense urban neighbourhoods\n      0.03\n      0.00\n    \n    \n      Gridded residential quarters\n      0.02\n      0.00"
  },
  {
    "objectID": "index.html#birmingham",
    "href": "index.html#birmingham",
    "title": "Urban Grammar - Green Belts Capsule",
    "section": "Birmingham",
    "text": "Birmingham\n\nProportionsMapTable\n\n\n\n\nCode\nax = build_plot(\n    build_tab(db.query('GB_Name == \"London\"')),\n    label=city,\n    context=tab,\n    figsize=(6, 6)\n)\n\nrects = ax.patches\nlabels = [i.get_text() for i in ax.get_yticklabels()]\nfor rect, label in zip(rects, labels):\n    w = rect.get_width()\n    ax.text(\n        w + 5,\n        rect.get_y() + rect.get_height() / 2,\n        label,\n        ha='left',\n        va='center'\n    )\n\n\n\n\n\n\n\n\n\nCode\ntmp = db.query(f'GB_Name == \"{city}\"')\nax = tmp.plot(\n    color=tmp['type'].map(sig_colors).map(to_hex),\n    linewidth=0,\n    categorical=True,\n    figsize=(5, 6)\n)\n\nplt.legend(\n    handles=build_legend(tmp['type'].unique()), \n    bbox_to_anchor=(1, 0.9), \n    loc=\"upper left\",\n    frameon=False\n)\nax.set_axis_off()\ncontextily.add_basemap(\n    ax, crs=db.crs, source=contextily.providers.CartoDB.DarkMatterNoLabels\n);\n\n\n\n\n\n\n\n\n\nCode\nbuild_tab(db.query(f'GB_Name == \"{city}\"'))\n\n\n\n\n\n\n  \n    \n      \n      Area (Sq.Km)\n      % of total area\n    \n    \n      type\n      \n      \n    \n  \n  \n    \n      Countryside agriculture\n      1437.69\n      63.59\n    \n    \n      Urban buffer\n      663.73\n      29.36\n    \n    \n      Warehouse/Park land\n      105.94\n      4.69\n    \n    \n      Open sprawl\n      48.20\n      2.13\n    \n    \n      Accessible suburbia\n      2.70\n      0.12\n    \n    \n      Disconnected suburbia\n      1.19\n      0.05\n    \n    \n      Wild countryside\n      1.13\n      0.05\n    \n    \n      Dense residential neighbourhoods\n      0.14\n      0.01\n    \n    \n      Gridded residential quarters\n      0.06\n      0.00"
  },
  {
    "objectID": "index.html#newcastle",
    "href": "index.html#newcastle",
    "title": "Urban Grammar - Green Belts Capsule",
    "section": "Newcastle",
    "text": "Newcastle\n\nProportionsMapTable\n\n\n\n\nCode\nax = build_plot(\n    build_tab(db.query('GB_Name == \"London\"')),\n    label=city,\n    context=tab,\n    figsize=(6, 6)\n)\n\nrects = ax.patches\nlabels = [i.get_text() for i in ax.get_yticklabels()]\nfor rect, label in zip(rects, labels):\n    w = rect.get_width()\n    ax.text(\n        w + 5,\n        rect.get_y() + rect.get_height() / 2,\n        label,\n        ha='left',\n        va='center'\n    )\n\n\n\n\n\n\n\n\n\nCode\ntmp = db.query(f'GB_Name == \"{city}\"')\nax = tmp.plot(\n    color=tmp['type'].map(sig_colors).map(to_hex),\n    linewidth=0,\n    categorical=True,\n    figsize=(5, 6)\n)\n\nplt.legend(\n    handles=build_legend(tmp['type'].unique()), \n    bbox_to_anchor=(1, 0.9), \n    loc=\"upper left\",\n    frameon=False\n)\nax.set_axis_off()\ncontextily.add_basemap(\n    ax, crs=db.crs, source=contextily.providers.CartoDB.DarkMatterNoLabels\n);\n\n\n\n\n\n\n\n\n\nCode\nbuild_tab(db.query(f'GB_Name == \"{city}\"'))\n\n\n\n\n\n\n  \n    \n      \n      Area (Sq.Km)\n      % of total area\n    \n    \n      type\n      \n      \n    \n  \n  \n    \n      Countryside agriculture\n      274.99\n      38.12\n    \n    \n      Urban buffer\n      215.62\n      29.89\n    \n    \n      Open sprawl\n      82.98\n      11.50\n    \n    \n      Wild countryside\n      73.17\n      10.14\n    \n    \n      Warehouse/Park land\n      72.56\n      10.06\n    \n    \n      Dense residential neighbourhoods\n      1.72\n      0.24\n    \n    \n      Accessible suburbia\n      0.28\n      0.04\n    \n    \n      Connected residential neighbourhoods\n      0.00\n      0.00"
  }
]